What is a String?
- A String is a sequence of characters.
- In Java, a String is an object that represents a sequence of characters.
- Unlike primitive data types, String is a predefined class in Java, available in the java.lang package.

Example in C:
char ch[5]; // Character array in C


Example in Java:

// Using String literal
String s1 = "Java";
// Using new keyword
String s2 = new String("Java");
How to Create a String Object

1. **Using String Literals:**
 - If the string exists in the String Constant Pool, a reference is returned.
 - If it does not exist, a new instance is created and stored.
 - Example:
 String s1 = "Java"; // String literal

2. **Using new Keyword:**
 - Always creates a new string object in heap memory.
 - Example:
 String s2 = new String("Java"); // Creates a new object in heap memory
String Constant Pool:
- Used to save memory by storing only one instance of each unique string.
- Strings are immutable, so reusing them avoids unnecessary memory consumption.
CharSequence Interface:
- The CharSequence interface is available in the java.lang package.
- Provides a flexible way to handle different types of character sequences.

- Classes that implement CharSequence:
 1. String (Immutable)
 2. StringBuffer (Mutable & Thread-Safe)
 3. StringBuilder (Mutable & Non-Thread-Safe)

String Class (Immutable):
- Represents a sequence of characters.
- Strings in Java are immutable (cannot be changed after creation).
- Ensures security, caching, and synchronization benefits.
Example:
String s1 = "Java";
String s2 = s1.concat(" Programming");
System.out.println(s1); // Output: Java (unchanged)
System.out.println(s2); // Output: Java Programming (new object created)
StringBuffer Class (Mutable & Thread-Safe):
- Allows modification of strings without creating new objects.
- It is mutable (can be modified after creation).
- Thread-safe, meaning multiple threads can work on it simultaneously.
- Used when a string is frequently modified (e.g., concatenation, insertion, deletion).

Example:
StringBuffer sb = new StringBuffer("Java");
sb.append(" Programming");
System.out.println(sb); // Output: Java Programming
Important Methods in StringBuffer:
- append(String str): Appends the specified string.
- insert(int offset, String str): Inserts a string at a specified position.
- delete(int start, int end): Removes characters from start to end index.
- replace(int start, int end, String str): Replaces characters in a substring.
- reverse(): Reverses the sequence of characters.

StringBuilder Class (Mutable & Non-Thread-Safe):
- Similar to StringBuffer but faster as it is not thread-safe.
- Recommended when working with strings in non-multithreaded applications.
Example:
StringBuilder sb = new StringBuilder("Java");
sb.append(" Programming");
System.out.println(sb); // Output: Java Programming


Conclusion:
- Use String when immutability is needed.
- Use StringBuffer for thread-safe mutable operations.
- Use StringBuilder for better performance in non-threaded applications.
